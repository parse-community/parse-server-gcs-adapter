{"version":3,"sources":["../index.ts"],"sourcesContent":["import { Storage, StorageOptions } from '@google-cloud/storage';\n\n\ninterface GCSAdapterOptions {\n  projectId?: string;\n  keyFilename?: string;\n  bucket: string;\n  bucketPrefix?: string;\n  directAccess?: boolean;\n  baseUrl?: string;\n}\n\ntype GCSAdapterConstructorArgs = [GCSAdapterOptions];\nfunction optionsFromArguments(args: GCSAdapterConstructorArgs): GCSAdapterOptions {\n  const defaultOptions: Partial<GCSAdapterOptions> = {\n    projectId: process.env['GCP_PROJECT_ID'],\n    keyFilename: process.env['GCP_KEYFILE_PATH'],\n    bucket: process.env['GCS_BUCKET'],\n    bucketPrefix: process.env['GCS_BUCKET_PREFIX'] || '',\n    directAccess: process.env['GCS_DIRECT_ACCESS'] === 'true' ? true : false\n  };\n\n  return {\n    ...defaultOptions,\n    ...args[0]\n  };\n}\n\nclass GCSAdapter {\n  private _bucket: string;\n  private _bucketPrefix: string;\n  private _directAccess: boolean;\n  private _gcsClient: Storage;\n  private _baseUrl: string;\n\n  constructor(...args: GCSAdapterConstructorArgs) {\n    let options = optionsFromArguments(args);\n\n    this._bucket = options.bucket;\n    this._bucketPrefix = options.bucketPrefix || '';\n    this._directAccess = options.directAccess || false;\n    this._baseUrl = options.baseUrl || 'https://storage.googleapis.com/';\n    this._gcsClient = new Storage(options as StorageOptions);\n  }\n\n  async createFile(filename: string, data: Buffer | string, contentType?: string): Promise<void> {\n    const params = {\n      metadata: {\n        contentType: contentType || 'application/octet-stream',\n      },\n    };\n\n    const file = this._gcsClient.bucket(this._bucket).file(this._bucketPrefix + filename);\n    await new Promise((resolve, reject) => {\n      const uploadStream = file.createWriteStream(params);\n      uploadStream.on('error', reject);\n      uploadStream.on('finish', resolve);\n      uploadStream.end(data);\n    });\n\n    if (this._directAccess) {\n      await file.makePublic().catch(err => {\n        throw new Error(`Error making file public: ${err}`);\n      });\n    }\n  }\n\n  async deleteFile(filename: string): Promise<void> {\n    try {\n      const file = this._gcsClient.bucket(this._bucket).file(this._bucketPrefix + filename);\n      await file.delete();\n    } catch (err) {\n      throw new Error(`Error deleting file ${filename}: ${err}`);\n    }\n  }\n\n  async getFileData(filename: string): Promise<Buffer> {\n    try {\n      const file = this._gcsClient.bucket(this._bucket).file(this._bucketPrefix + filename);\n      const [exists] = await file.exists();\n      if (!exists) {\n        throw new Error(`File ${filename} does not exist.`);\n      }\n      const [data] = await file.download();\n      return data;\n    } catch (err) {\n      throw new Error(`Error downloading file ${filename}: ${err}`);\n    }\n  }\n\n\n  getFileLocation(config: { mount: string; applicationId: string; }, filename: string): string {\n    if (this._directAccess) {\n      return `${this._baseUrl}${this._bucket}/${this._bucketPrefix + filename}`;\n    }\n    return `${config.mount}/files/${config.applicationId}/${encodeURIComponent(filename)}`;\n  }\n}\n\n\nexport default GCSAdapter;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,eAA+B;AAaxC,SAAS,qBAAqB,MAAoD;AAChF,QAAM,iBAA6C;AAAA,IACjD,WAAW,QAAQ,IAAI,gBAAgB;AAAA,IACvC,aAAa,QAAQ,IAAI,kBAAkB;AAAA,IAC3C,QAAQ,QAAQ,IAAI,YAAY;AAAA,IAChC,cAAc,QAAQ,IAAI,mBAAmB,KAAK;AAAA,IAClD,cAAc,QAAQ,IAAI,mBAAmB,MAAM,SAAS,OAAO;AAAA,EACrE;AAEA,SAAO,kCACF,iBACA,KAAK,CAAC;AAEb;AAEA,IAAM,aAAN,MAAiB;AAAA,EAOf,eAAe,MAAiC;AAC9C,QAAI,UAAU,qBAAqB,IAAI;AAEvC,SAAK,UAAU,QAAQ;AACvB,SAAK,gBAAgB,QAAQ,gBAAgB;AAC7C,SAAK,gBAAgB,QAAQ,gBAAgB;AAC7C,SAAK,WAAW,QAAQ,WAAW;AACnC,SAAK,aAAa,IAAI,QAAQ,OAAyB;AAAA,EACzD;AAAA,EAEM,WAAW,UAAkB,MAAuB,aAAqC;AAAA;AAC7F,YAAM,SAAS;AAAA,QACb,UAAU;AAAA,UACR,aAAa,eAAe;AAAA,QAC9B;AAAA,MACF;AAEA,YAAM,OAAO,KAAK,WAAW,OAAO,KAAK,OAAO,EAAE,KAAK,KAAK,gBAAgB,QAAQ;AACpF,YAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrC,cAAM,eAAe,KAAK,kBAAkB,MAAM;AAClD,qBAAa,GAAG,SAAS,MAAM;AAC/B,qBAAa,GAAG,UAAU,OAAO;AACjC,qBAAa,IAAI,IAAI;AAAA,MACvB,CAAC;AAED,UAAI,KAAK,eAAe;AACtB,cAAM,KAAK,WAAW,EAAE,MAAM,SAAO;AACnC,gBAAM,IAAI,MAAM,6BAA6B,GAAG,EAAE;AAAA,QACpD,CAAC;AAAA,MACH;AAAA,IACF;AAAA;AAAA,EAEM,WAAW,UAAiC;AAAA;AAChD,UAAI;AACF,cAAM,OAAO,KAAK,WAAW,OAAO,KAAK,OAAO,EAAE,KAAK,KAAK,gBAAgB,QAAQ;AACpF,cAAM,KAAK,OAAO;AAAA,MACpB,SAAS,KAAK;AACZ,cAAM,IAAI,MAAM,uBAAuB,QAAQ,KAAK,GAAG,EAAE;AAAA,MAC3D;AAAA,IACF;AAAA;AAAA,EAEM,YAAY,UAAmC;AAAA;AACnD,UAAI;AACF,cAAM,OAAO,KAAK,WAAW,OAAO,KAAK,OAAO,EAAE,KAAK,KAAK,gBAAgB,QAAQ;AACpF,cAAM,CAAC,MAAM,IAAI,MAAM,KAAK,OAAO;AACnC,YAAI,CAAC,QAAQ;AACX,gBAAM,IAAI,MAAM,QAAQ,QAAQ,kBAAkB;AAAA,QACpD;AACA,cAAM,CAAC,IAAI,IAAI,MAAM,KAAK,SAAS;AACnC,eAAO;AAAA,MACT,SAAS,KAAK;AACZ,cAAM,IAAI,MAAM,0BAA0B,QAAQ,KAAK,GAAG,EAAE;AAAA,MAC9D;AAAA,IACF;AAAA;AAAA,EAGA,gBAAgB,QAAmD,UAA0B;AAC3F,QAAI,KAAK,eAAe;AACtB,aAAO,GAAG,KAAK,QAAQ,GAAG,KAAK,OAAO,IAAI,KAAK,gBAAgB,QAAQ;AAAA,IACzE;AACA,WAAO,GAAG,OAAO,KAAK,UAAU,OAAO,aAAa,IAAI,mBAAmB,QAAQ,CAAC;AAAA,EACtF;AACF;AAGA,IAAO,oBAAQ;","names":[]}